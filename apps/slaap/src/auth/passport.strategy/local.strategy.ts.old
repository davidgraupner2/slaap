import { Strategy } from 'passport-local';
import { PassportStrategy } from '@nestjs/passport';
import { Injectable, UnauthorizedException } from '@nestjs/common';
import { UserService } from '../../users/users.service';
import * as authConstants from '@lib/auth/constants';
import { User } from '@lib/entities';

@Injectable()
/* 
 We are leveraging the passpot.js strategies for authentication
 - see: http://www.passportjs.org/concepts/authentication/strategies/
*/
export class LocalStrategy extends PassportStrategy(Strategy) {
  constructor(private userService: UserService) {
    super();
  }

  // This Passport js strategy calls this function to locally authenticate the user
  async validate(
    username: string,
    password: string,
  ): Promise<User | undefined> {
    /*
    Check the user exists - username and password must match and must be active
    */

    const user: User | undefined = await this.userService.getLocalLoginUser(
      username,
      password,
    );

    //Handle Email not verified
    if (user && !user.isActive && !user.isEmailVerified) {
      throw new UnauthorizedException(authConstants.ACCESS_DENIED, {
        cause: new Error(),
        description: authConstants.EMAIL_ADDRESS_NOT_VERIFIED,
      });
    }

    // Handle User not active
    if (user && !user.isActive) {
      throw new UnauthorizedException(authConstants.ACCESS_DENIED, {
        cause: new Error(),
        description: authConstants.NOT_ACTIVE,
      });
    }

    if (!user) {
      throw new UnauthorizedException(authConstants.ACCESS_DENIED, {
        cause: new Error(),
        description: authConstants.CREDENTIALS_INCORRECT,
      });
    }

    // If the user was found - passport.js adds the user to the request object as req.user
    if (user) {
      delete user.password;
    }
    return user;
  }
}
